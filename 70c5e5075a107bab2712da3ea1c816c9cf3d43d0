{
  "comments": [
    {
      "key": {
        "uuid": "21d1173e_1ba1d178",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-06-17T20:05:54Z",
      "side": 1,
      "message": "If I was writing this, I would probably just call it a `Led`. Just my 0.02â‚¬, no need for change.",
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "948b7284_fc64e01a",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-06-17T20:05:54Z",
      "side": 1,
      "message": "I do not expect callers to use these two methods.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef5a9dcc_b6b18f8e",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-06-17T20:41:33Z",
      "side": 1,
      "message": "That depends if you want a yellow or orange color (I think we talked about orange earlier, right?) I don\u0027t know how to mix RGB to produce orange using only values from set {0,max}.\nIf yellow is sufficient then I will delete these methods. I might remember that discussion incorrectly.",
      "parentUuid": "948b7284_fc64e01a",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4e0dc64_ad80b7ac",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-06-17T21:52:57Z",
      "side": 1,
      "message": "Ah, now that\u0027s a good catch, I didn\u0027t know that. So IMHO it makes sense to have:\n\n void off();\n void on();\n void set(uint32_t brightness);\n\nAnd *maybe* also:\n\n uint32_t maxBrightness() const;\n\nHowever, I do not think that the callers will be that generic in nature (i.e., they likely won\u0027t query the system for max brightness and then use something like 60% green and 100% red because that\u0027s extra work). So I wouldn\u0027t mind at all if this was a rather stupid code, garbage-in, garbage-out, and if the user invokes set(666), well, I don\u0027t care.\n\nBesides, the kernel appears to handle this just fine without having to write extra code here:\n\n # echo 666 \u003e /sys/class/leds/uid\\:blue/brightness \n # cat /sys/class/leds/uid\\:blue/brightness \n 256\n\n-\u003e what about just nuking this brightness chekcing?",
      "parentUuid": "ef5a9dcc_b6b18f8e",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5660b6ef_4c4c433e",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-06-18T08:07:34Z",
      "side": 1,
      "message": "void on();\n void set(uint32_t brightness);\n\nHow do you expect these to work? On() sets to max (or last known value \u003e0?) and set(val) sets to val? Now we have two differently named methods that can turn the light on. I\u0027m not sure whether it is clear (and I\u0027m obviously overthinking it again.)",
      "parentUuid": "c4e0dc64_ad80b7ac",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aa9f6cd_5317f766",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-06-18T08:44:03Z",
      "side": 1,
      "message": "Ah, sure, `void on();` would require knowing what the max value is :). So you can make it either (1):\n\n explicit Led(const std::filesystem::path\u0026 dir, const uint32_t maxBrightness);\n void off();\n void on();\n void set(const uint32_t brightness);\n\nor (2):\n\n explicit Led(const std::filesystem::path\u0026 dir);\n void set(const uint32_t brightness);\n\nor, as you have it now, (3) which is (1) with brightness autodetection. If you prefer (3), I can live with that even if it isn\u0027t really my preference. I think I like (2) because that\u0027s super-dumb, and I like dumb code (as I usually understand that).",
      "parentUuid": "5660b6ef_4c4c433e",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7f66ffe_4eaac9de",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-06-19T07:39:44Z",
      "side": 1,
      "message": "Okay. I am removing all the checks (added a documentation note regarding that) and also getMax(). Let it be caller responsibility to know what the maxBrightnessValue is for the LED he initializes.\n\nWe can refactor later should it be neccesary.",
      "parentUuid": "4aa9f6cd_5317f766",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 23,
        "endChar": 38
      },
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6c7b801_239f1736",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-06-17T20:05:54Z",
      "side": 1,
      "message": "I don\u0027t think that the max brightness would change over time a LED device lifetime, so I don\u0027t think there\u0027s a need to query this file outside of the constructor.",
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6ab7c78_6ca80cf4",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-06-17T20:41:33Z",
      "side": 1,
      "message": "This is not maxBrightness but currentBrightness. I will rename those identifiers so it is more clear at first sight.",
      "parentUuid": "f6c7b801_239f1736",
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d3480f1_c2b8ed66",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-06-19T07:39:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6ab7c78_6ca80cf4",
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d31421f_8e0e4e64",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2020-06-17T20:05:54Z",
      "side": 1,
      "message": "nit: let\u0027s use brief and succinct identifiers. In this case, writeBrightness() conveys the same amount of information.",
      "range": {
        "startLine": 31,
        "startChar": 24,
        "endLine": 31,
        "endChar": 29
      },
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e8a5692_f25072d0",
        "filename": "src/outputs/LedSysfsDriver.h",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1000062
      },
      "writtenOn": "2020-06-19T07:39:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d31421f_8e0e4e64",
      "range": {
        "startLine": 31,
        "startChar": 24,
        "endLine": 31,
        "endChar": 29
      },
      "revId": "70c5e5075a107bab2712da3ea1c816c9cf3d43d0",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68",
      "unresolved": false
    }
  ]
}